<?php
// $Id$

/**
 * @file
 * @todo
 */

/**
 * By default we don not override the site offline state.
 * The third radiobutton has the value of 2
 */
define(SITESTATE_NO_OVERRIDE_OFFLINE, 2);

/**
 * Implementation of hook_menu().
 */
function sitestate_menu() {
  $items = array();

  $items['admin/settings/sitestate'] = array(
    'title' => 'Site states',
    'page callback' => 'sitestate_admin_page',
    'access arguments' => array('administer site state'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'sitestate.admin.inc',
  );
  $items['admin/settings/sitestate/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/sitestate/add'] = array(
    'title' => 'Add site state',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitestate_edit_state'),
    'access arguments' => array('administer site state'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'sitestate.admin.inc',
  );
  $items['admin/settings/sitestate/%sitestate/edit'] = array(
    'title' => 'Edit site state',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitestate_edit_state', 3),
    'access arguments' => array('administer site state'),
    'type' => MENU_CALLBACK,
    'file' => 'sitestate.admin.inc',
  );
  $items['admin/settings/sitestate/%sitestate/delete'] = array(
    'title' => 'Delete site state',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitestate_delete_state', 3),
    'access arguments' => array('administer site state'),
    'type' => MENU_CALLBACK,
    'file' => 'sitestate.admin.inc',
  );
  $items['admin/settings/sitestate/modules'] = array(
    'title' => 'Module autocomplete',
    'page callback' => 'sitestate_module_autocomplete',
    'access arguments' => array('administer site state'),
    'type' => MENU_CALLBACK,
    'file' => 'sitestate.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function sitestate_perm() {
  return array('administer site state', 'apply site state');
}

function sitestate_form_system_site_maintenance_settings_alter(&$form, &$form_state) {
  $options = array();
  $states = sitestate_load_all();
  foreach ($states as $state) {
    $options[$state->ssid] = $state->title;
  }
  $form['sitestate_selected_state'] = array(
    '#type' => 'radios',
    '#title' => t('Site state'),
    '#default_value' => variable_get('sitestate_selected_state', 1),
    '#options' => $options  ,
    '#weight' => -10,
    '#description' => t('Your site will be set in the selected state.'),
  );
  $differences = sitestate_check_state();
  // @todo Rebuilt as a themable message.
  //       Use a user friendly differences format.
  if ($differences !== TRUE) {
    $form['warning'] = array(
      '#value' => t('<strong>The current state does not match the selected state.</strong> Some settings may have been altered manually.') .'<br />'. t('Current state(s): @differences', array('@differences' => print_r($differences, 1))),
      '#weight' => -9,
    );
  }
  
  $form['override'] = array(
    '#type' => 'fieldset',
    '#title' => t('Override'),
    '#weight' => -5,
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('sitestate_override_site_offline', SITESTATE_NO_OVERRIDE_OFFLINE) == SITESTATE_NO_OVERRIDE_OFFLINE,
  );
  $form['override']['sitestate_override_site_offline'] = array(
    '#type' => 'radios',
    '#title' => t('Site status'),
    '#default_value' => variable_get('sitestate_override_site_offline', SITESTATE_NO_OVERRIDE_OFFLINE),
    '#options' => array(t('Online'), t('Off-line'), t('No override')),
    '#description' => t('Override the online/off-line status of the above selected site state.') .'<br />'. $form['site_offline']['#description'],
  );
  
  $form['override']['site_offline']['#title'] = t('Online state');
  unset($form['site_offline']);
  unset($form['site_offline_message']);
  
  $form['#submit'][] = 'sitestate_site_maintenance_submit';
}

/**
 * Site maintenance form custom submit handler.
 */
function sitestate_site_maintenance_submit($form, &$form_state) {
  module_load_include('inc', 'sitestate', 'sitestate.admin');
  sitestate_apply_state($form_state['values']['sitestate_selected_state']);
}

/**
 * Load single sites state.
 *
 * @todo
 */
function sitestate_load($ssid) {
  $sitestate = array();
  if (!isset($sitestate[$ssid])) {
    $result = db_query('SELECT * FROM {sitestate} WHERE ssid = %d', $ssid);
    $sitestate = db_fetch_object($result);
  }
  return $sitestate;
}

/**
 * Load all sites states.
 *
 * @param $ssids
 *   Array of site state ids.
 * @return array of site state objects.
 */
function sitestate_load_all() {
  static $sitestates = array();
  if (empty($sitestates)) {
    $result = db_query('SELECT * FROM {sitestate}');
    while ($sitestate = db_fetch_object($result)) {
      $sitestates[$sitestate->ssid] = $sitestate;
    }
  }
  return $sitestates;
}

/**
 * Load single sites state including state settings.
 *
 * @param $ssid
 *   Site state id.
 * @return site state object including state's settings objects.
 */
function sitestate_get_sitestate($ssid) {
  $sitestate = sitestate_load($ssid);
  $sitestate->settings = sitestate_settings_load($ssid);
  return $sitestate;
}

/**
 * Gets site state settings form database and performs nesscecary data conversion.
 */
function sitestate_get_settings($ssid, $reset = FALSE) {
  $settings = array();
  $raw_settings = sitestate_settings_load($ssid, $reset);
  foreach ($raw_settings as $key => $raw_setting) {
    $setting = $raw_setting;
    switch ($raw_setting->type) {
      case 'variable':
        $setting->value = unserialize($raw_setting->value);
        break;
      case 'module':
        break;
    }
    $settings[$key] = $setting;
  }
  return $settings;
}

/**
 * Load setting of a site state.
 *
 * @param $ssid
 *   Site state id.
 * @return array of site state settings objects.
 */
function sitestate_settings_load($ssid, $reset = FALSE) {
  static $settings = array();
  if (!$settings || $reset) {
    $result = db_query('SELECT * FROM {sitestate_settings} WHERE ssid = %d', $ssid);
    while ($setting = db_fetch_object($result)) {
      $settings[$setting->type .':'. $setting->name] = $setting;
    }
  }
  return $settings;
}

/**
 * Check if the current state maches the last selected state.
 *
 * @return found differences
 *   Array of found differences
 *   TRUE if no difference are found.
 */
//@todo In what file to place this function
function sitestate_check_state() {
  $differences = array();
  
  $selected_states = sitestate_get_settings(variable_get('sitestate_selected_state', 1));
  $current_states = sitestate_get_current_states();
  foreach ($selected_states as $key => $selected) {
    if (isset($current_states[$key])) {
      if ($selected->value != $current_states[$key]->value) {
        $differences[] = array(
          'type' => $selected->type,
          'name' => $selected->name,
          'value' => $current_states[$key]->value,
        );
      }
    }
    else {
      $differences[] = array(
        'type' => $selected->type,
        'name' => $selected->name,
        'value' => t('Undefined'),
      );
    }
  }
  return empty($differences) ? TRUE : $differences;
}

/**
 * Return the current state of specified type-name pairs
 *
 * @todo
 */
// @todo In what file to place this function
// @todo rename to sitestate_get_current_settings().
function sitestate_get_current_states($keys = array()) {
  global $conf;
  $current_states = array();
  
  // By default we check the current state only those items set in the selected site state.
  if (empty($keys)) {
    $keys = array_keys(sitestate_get_settings(variable_get('sitestate_selected_state', 1)));
  }

  foreach ($keys as $key) {
    list($type, $name) = explode(':', $key);
    $state = new stdClass();
    $state->ssid = variable_get('sitestate_selected_state', 1);
    $state->type = $type;
    $state->name = $name;
    switch ($type) {
      case 'module':
        // Convert to a form that maches 
        $state->value = module_exists($name) ? '1' : '0';
        break;
      case 'variable':
        // We don't use the variable_get() here to avoid the variable_get default.
        if (isset($conf[$name])) {
          $state->value = $conf[$name];
        }
        break;
    }
    $current_states[$key] = $state;
  }
  return $current_states;
}
